if(test_name == str_join(name, surname, sep = " ")){
data_stat <- readHTMLTable(ref, stringAsFactors = FALSE)$pgl_basic
break()
}
}
team_stat[[i]] <- data_stat
rm(ext_init, ext_sur, ext_nam, ref_ext, ref_init, ref_spec, ref_count, ref, test_name, data_stat, name, surname)
}
return(team_stat)
}
rm(vect)
data <- fantasy.nba.dataset(team)
data <- fantasy.NBA.dataset(team)
data[[1]]
str(data)
vect <- vector(mode = "list", 2)
vect[[2]] <- vector(mode = "list", 2)
vect[[2]]
vect[[2]][[1]]
team_stat <- vector(mode = "list", length = length(team))
names(team_stat) <- team
team_stat[[i]] <- vector(mode="list", 4)
names(team_stat[[i]]) <- c("Info", "All Data", "Schedule", "Analysis")
name <- word(team[i], 1)
surname <- word(team[i], 2)
## Defining the link to scrape from name and surname provided
ext_init <- tolower(str_sub(string = surname, start = 1, end = -(str_length(surname))))
##control for surname length
if(str_length(surname)>4){
ext_sur <- tolower(str_sub(string = surname, start = 1, end = -(str_length(surname)-4)))
}else{ext_sur <- surname}
##control for name length
if(str_length(name)>2){
ext_nam <- tolower(str_sub(string = name, start = 1, end = -(str_length(name)-1)))
}else{ext_nam <- name}
i <- 1
team_stat[[i]] <- vector(mode="list", 4)
names(team_stat[[i]]) <- c("Info", "All Data", "Schedule", "Analysis")
name <- word(team[i], 1)
surname <- word(team[i], 2)
## Defining the link to scrape from name and surname provided
ext_init <- tolower(str_sub(string = surname, start = 1, end = -(str_length(surname))))
##control for surname length
if(str_length(surname)>4){
ext_sur <- tolower(str_sub(string = surname, start = 1, end = -(str_length(surname)-4)))
}else{ext_sur <- surname}
##control for name length
if(str_length(name)>2){
ext_nam <- tolower(str_sub(string = name, start = 1, end = -(str_length(name)-1)))
}else{ext_nam <- name}
ref_ext <- "http://www.basketball-reference.com/players/"
ref_init <- ref <- str_join(ref_ext, ext_init, "/", ext_sur, ext_nam)
ref_spec <- "/gamelog/2015/#pgl_basic::none"
j <- 1
ref_count <- str_join("0",j)
ref <- str_join(ref_init, ref_count, ref_spec)
readHTMLList(ref, stringAsFactors = FALSE)
readHTMLTable(ref, stringAsFactors = FALSE)
rm(list=ls())
team <- c("Ty Lawson", "Gordon Hayward", "Draymond Green", "Anthony Davis",
"Rudy Gobert", "Wilson Chandler", "DeAndre Jordan", "Tyson Chandler", "Avery Bradley",
"Bradley Beal", "Aaron Brooks", "Zach LaVine")
team_name <- c("Atlanta Hawks",
"Boston Celtics",
"Brooklyn Nets",
"Charlotte Hornets",
"Chicago Bulls",
"Cleveland Cavaliers",
"Dallas Mavericks",
"Denver Nuggets",
"Detroit Pistons",
"Golden State Warriors",
"Houston Rockets",
"Indiana Pacers",
"Los Angeles Clippers",
"Los Angeles Lakers",
"Memphis Grizzlies",
"Miami Heat",
"Milwaukee Bucks",
"Minnesota Timberwolves",
"New Orleans Pelicans",
"New York Knicks",
"Oklahoma City Thunder",
"Orlando Magic",
"Philadelphia 76ers",
"Phoenix Suns",
"Portland Trail Blazers",
"Sacramento Kings",
"San Antonio Spurs",
"Toronto Raptors",
"Utah Jazz",
"Washington Wizards")
team_c <- c("ATL",        "BOS",       "BRK",       "CHO",       "CHI",       "CLE",
"DAL",        "DEN",       "DET",       "GSW",       "HOU",       "IND",
"LAC",       "LAL",       "MEM",       "MIA",       "MIL",       "MIN",
"NOP",       "NYK",       "OKC",       "ORL",       "PHI",       "PHO",
"POR",       "SAC",       "SAS",       "TOR",       "UTA",       "WAS")
team_conv <- data.frame("Team Full Name" = team_name, "Team CODE" = team_c)
rm(team_c, team_name)
fantasy.NBA.dataset <- function(team){
##library required
require(XML)
require(stringr)
team_stat <- vector(mode = "list", length = length(team))
names(team_stat) <- team
for(i in 1:length(team)){
team_stat[[i]] <- vector(mode="list", 3)
names(team_stat[[i]]) <- c("All Data", "Schedule", "Analysis")
name <- word(team[i], 1)
surname <- word(team[i], 2)
## Defining the link to scrape from name and surname provided
ext_init <- tolower(str_sub(string = surname, start = 1, end = -(str_length(surname))))
##control for surname length
if(str_length(surname)>4){
ext_sur <- tolower(str_sub(string = surname, start = 1, end = -(str_length(surname)-4)))
}else{ext_sur <- surname}
##control for name length
if(str_length(name)>2){
ext_nam <- tolower(str_sub(string = name, start = 1, end = -(str_length(name)-1)))
}else{ext_nam <- name}
ref_ext <- "http://www.basketball-reference.com/players/"
ref_init <- ref <- str_join(ref_ext, ext_init, "/", ext_sur, ext_nam)
ref_spec <- "/gamelog/2015/#pgl_basic::none"
for (j in 1:9){
ref_count <- str_join("0",j)
ref <- str_join(ref_init, ref_count, ref_spec)
test_name <- readHTMLList(ref, stringAsFactors = FALSE)[[16]][1]
if(test_name == str_join(name, surname, sep = " ")){
data_stat <- readHTMLTable(ref, stringAsFactors = FALSE)$pgl_basic
break()
}
}
team_stat[[i]][[1]] <- data_stat
rm(ext_init, ext_sur, ext_nam, ref_ext, ref_init, ref_spec, ref_count, ref, test_name, data_stat, name, surname)
}
return(team_stat)
}
data <- fantasy.NBA.dataset(team)
data
data["Aaron Brooks"]
data[[1]][[1]]
str(data[[1]][[1]])
str(data[[1]][[1]])$tm
data[[1]][[1]]$Tm
levels(data[[1]][[1]]$Tm)
levels(data[[1]][[1]]$Tm)[1]
install.packages("quantlib")
install.packages("RQuantLib")
library(RQuantLib)
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringAsFactors=FALSE)
getwd()
?read.csv
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_dp, package, country)
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country= "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size-1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group.by(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, prob = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, prob = 0.99)
top_unique <- filter(pack_sum, count > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(result3)
submit()
submit()
submit()
submit()
install.packages("httr")
library(httr)
oauth_endpoints("github")
?oauth_app
myapp <- oauth_app("github", "d20189926467dcc72c7d", "319b0893ba93a48211f729eb9e7c392f6720e789")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github", "d20189926467dcc72c7d", "319b0893ba93a48211f729eb9e7c392f6720e789")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
myapp <- oauth_app("github", "d20189926467dcc72c7d", "319b0893ba93a48211f729eb9e7c392f6720e789")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
myapp <- oauth_app("github", "d20189926467dcc72c7d", "319b0893ba93a48211f729eb9e7c392f6720e789")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
?oauth_app
319b0893ba93a48211f729eb9e7c392f6720e789
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
myapp <- oauth_app("github", "d20189926467dcc72c7d", "319b0893ba93a48211f729eb9e7c392f6720e789")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req$message
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
myapp <- oauth_app("github", "d20189926467dcc72c7d", "319b0893ba93a48211f729eb9e7c392f6720e789")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
str(req)
stop_for_status(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
myapp <- oauth_app("github", "d20189926467dcc72c7d", "319b0893ba93a48211f729eb9e7c392f6720e789")
oauth_endpoints(name = "github")
ibrary(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints(name = "github")
myapp <- oauth_app("github", "d20189926467dcc72c7d", "319b0893ba93a48211f729eb9e7c392f6720e789")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints(name = "github")
myapp <- oauth_app("github", "d20189926467dcc72c7d", "319b0893ba93a48211f729eb9e7c392f6720e789")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
oauth_endpoints(name = "github")
myapp <- oauth_app("github", "d20189926467dcc72c7d", "2d60aa17d90eaf7aa8c90d50f60c48e655a1b8d3")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints(name = "github")
myapp <- oauth_app("github", "d20189926467dcc72c7d", "2d60aa17d90eaf7aa8c90d50f60c48e655a1b8d3")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
?GET
req <- GET("https://api.github.com/users/jtleek/repos", gtoken, redirect_uri="http://localhost:1410")
stop_for_status(req)
req
myapp <- oauth_app("github", "d20189926467dcc72c7d")
oauth_endpoints(name = "github")
myapp <- oauth_app("github", "d20189926467dcc72c7d", 2d60aa17d90eaf7aa8c90d50f60c48e655a1b8d3)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token, cache=FALSE)
install.packages("httpuv")
library(httr)
library(httpuv)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints(name = "github")
myapp <- oauth_app("github", "d20189926467dcc72c7d", 2d60aa17d90eaf7aa8c90d50f60c48e655a1b8d3)
github_token <- oauth2.0_token(oauth_endpoints(name = "github"), myapp, cache=FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken, redirect_uri="http://localhost:1410")
stop_for_status(req)
content(req)
data <- read.csv("activity.csv", header = TRUE, sep = ",")
library(dplyr)
library(lubridate)
data <- mutate(.data = data, time = ymd_hm(paste(date, sprintf(fmt = "%04d", interval),sep = " ")))
data <- read.csv("activity.csv", header = TRUE, sep = ",")
setwd("/Users/Alessandro/Documents/DataScience/GitHub/RepData_PeerAssessment1")
data <- read.csv("activity.csv", header = TRUE, sep = ",")
library(dplyr)
library(lubridate)
data <- mutate(.data = data, time = ymd_hm(paste(date, sprintf(fmt = "%04d", interval),sep = " ")))
library(dplyr)
tot_steps <- data %>%
group_by(date) %>%
summarize(tot_steps = sum(steps, na.rm = TRUE))
library(dplyr)
tot_steps <- data %>%
group_by(date) %>%
summarize(tot_steps = sum(steps, na.rm = TRUE))
library(ggplot2)
g <- ggplot()
g <- g + geom_histogram(data = tot_steps, aes(tot_steps, fill= ..count..))
g <- g + theme_bw(base_family="Avenir")
g <- g + labs(x = "Sum of Daily Steps", y = "Count")
g <- g + labs(title = "Distribution of daily sum of steps")
print(g)
mean(tot_steps$tot_steps)
median(tot_steps$tot_steps)
library(dplyr)
library(ggplot2)
av_int_steps <- data %>%
group_by(interval) %>%
summarize(mean = mean(steps, na.rm = TRUE))
g <- ggplot()
g <- g + geom_line(data = av_int_steps, aes(x = interval, y = mean))
g <- g + labs(x = "Number of steps (5-min interval)", y = "Mean of number of steps")
g <- g + labs(title = "Average of number of steps for 5-minutes intervals")
print(g)
sum(is.na(data$steps))
i <- 0
adj_steps <- numeric(length = length(data$steps))
for(i in 1:length(data$steps)){
if(is.na(data$steps[i])){
adj_steps[i] <- av_int_steps[which(av_int_steps$interval == data$interval[i])]
}
else adj_steps[i] <- data$steps[i]
}
data_adj <- data
data_adj$steps <- adj_steps
sum(is.ns(data_adj))
sum(is.na(data_adj$steps))
library(dplyr)
data_adj <- data
data_adj$steps <- adj_steps
tot_steps_adj <- data_adj %>%
group_by(date) %>%
summarize(tot_steps = sum(steps, na.rm = TRUE))
data_adj
head(data_adj)
str(av_int_steps)
i <- 0
adj_steps <- numeric(length = length(data$steps))
for(i in 1:length(data$steps)){
if(is.na(data$steps[i])){
adj_steps[i] <- av_int_steps$mean[which(av_int_steps$interval == data$interval[i])]
}
else adj_steps[i] <- data$steps[i]
}
library(dplyr)
data_adj <- data
data_adj$steps <- adj_steps
tot_steps_adj <- data_adj %>%
group_by(date) %>%
summarize(tot_steps = sum(steps, na.rm = TRUE))
library(ggplot2)
g <- ggplot()
g <- g + geom_histogram(data_adj = tot_steps, aes(tot_steps, fill= ..count..))
g <- g + theme_bw(base_family="Avenir")
g <- g + labs(x = "Sum of Daily Steps", y = "Count")
g <- g + labs(title = "Distribution of daily sum of steps")
print(g)
head(tot_steps_adj)
library(ggplot2)
g <- ggplot()
g <- g + geom_histogram(tot_step_adj = tot_steps, aes(tot_steps, fill= ..count..))
g <- g + theme_bw(base_family="Avenir")
g <- g + labs(x = "Sum of Daily Steps", y = "Count")
g <- g + labs(title = "Distribution of daily sum of steps")
print(g)
library(ggplot2)
g <- ggplot()
g <- g + geom_histogram(data = tot_steps_adj, aes(tot_steps, fill= ..count..))
g <- g + theme_bw(base_family="Avenir")
g <- g + labs(x = "Sum of Daily Steps", y = "Count")
g <- g + labs(title = "Distribution of daily sum of steps")
print(g)
weekdays(data$date[1])
weekdays(data$time[1])
?weekdays
i <- 0
days <- vector(mode = "character", length(data$date))
for (i in 1:length(data$date)){
if(weekdays(data$time[i])=="Saturday"|weekdays(data$time[i])=="Sunday"){
days[i] <- "weekend"
}
else days[i] <- "weekday"
}
sum(days="Saturday")
sum(days=="Saturday")
sum(days=="weekend")
sum(days=="weekday")
data <- mutate(data, day_type = days)
head(data)
data %>%
group_by(interval, day_type) %>%
summarize(mean = mean(steps, na.rm = TRUE))
library(dplyr)
library(ggplot2)
i <- 0
days <- vector(mode = "character", length(data$date))
for (i in 1:length(data$date)){
if(weekdays(data$time[i])=="Saturday"|weekdays(data$time[i])=="Sunday"){
days[i] <- "weekend"
}
else days[i] <- "weekday"
}
data <- mutate(data, day_type = days)
av_int_steps_bt <- data %>%
group_by(interval, day_type) %>%
summarize(mean = mean(steps, na.rm = TRUE))
head(av_int_steps_type)
head(av_int_steps_bt)
g <- ggplot()
g <- g + geom_line(data = av_int_steps_bt, aes(x = interval, y = mean))
g <- g + facet_wrap( ~ day_type)
g <- g + labs(x = "Number of steps (5-min interval)", y = "Time")
g <- g + labs(title = "")
print(g)
?facet
g <- ggplot()
g <- g + geom_line(data = av_int_steps_bt, aes(x = interval, y = mean))
g <- g + facet_wrap(day_type ~ )
g <- g + labs(x = "Number of steps (5-min interval)", y = "Time")
g <- g + labs(title = "")
print(g)
g <- ggplot()
g <- g + geom_line(data = av_int_steps_bt, aes(x = interval, y = mean))
g <- g + facet_grid(day_type ~ )
g <- g + labs(x = "Number of steps (5-min interval)", y = "Time")
g <- g + labs(title = "")
print(g)
g <- ggplot()
g <- g + geom_line(data = av_int_steps_bt, aes(x = interval, y = mean))
g <- g + facet_grid(day_type ~ .)
g <- g + labs(x = "Number of steps (5-min interval)", y = "Time")
g <- g + labs(title = "")
print(g)
g <- ggplot()
g <- g + geom_line(data = av_int_steps_bt, aes(x = interval, y = mean))
g <- g + facet_grid(day_type ~ .)
g <- g + labs(x = "Number of steps (5-min interval)", y = "Time")
g <- g + labs(title = "Average Number of steps for 5-minutes weekday vs weekend")
print(g)
g <- ggplot()
g <- g + geom_line(data = av_int_steps_bt, aes(x = interval, y = mean))
g <- g + facet_grid(day_type ~ .)
g <- g + labs(x = "Number of steps (5-min interval)", y = "Average Number of steps")
g <- g + labs(title = "Average Number of steps for 5-minutes weekday vs weekend")
print(g)
